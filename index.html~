<!DOCTYPE html>
<html>
  <head>
    <title>Hello World!</title>
  </head>
  <body>
    <h1>Hello World!</h1>
    We are using node.js <script>document.write(process.version)</script>
    and atom-shell <script>document.write(process.versions['atom-shell'])</script>.

<script src="https://rawgithub.com/mrdoob/three.js/master/build/three.min.js"></script>
<canvas id="tex"></canvas>
<canvas id="cs"></canvas>
<script type="text/javascript">
// forked from kjunichi's "Three.jsでMathematica風のライティング" http://jsdo.it/kjunichi/2p0N
(function () {
    var image2;
    var canvasScaled;

    var texture;
    
    function genImage(image) {
        for (i = 0; i < image.height; i++) {
            for (j = 0; j < image.width; j++) {
                // 赤成分
                image.data[j * 4 + i * image2.width * 4] = Math.random() * j * 8;
                // 緑成分
                image.data[1 + j * 4 + i * image2.width * 4] = 255 - (i * 8);
                // 青成分
                image.data[2 + j * 4 + i * image2.width * 4] = i * 8;
                // アルファ成分
                image.data[3 + j * 4 + i * image2.width * 4] = 255;
            }
        }

    }

    function updateTexture() {
        context = canvasScaled.getContext('2d');
        genImage(image2);
        context.putImageData(image2, 0, 0);

    }
    var t = 0;
    var camera, scene, renderer;
    var geometry, material, mesh, mesh2;

    init();
    drawObj();
    animate();

    function drawObj() {
        canvasScaled = document.getElementById('tex');
        canvasScaled.width = 100;
        canvasScaled.height = 100;
        context = canvasScaled.getContext('2d');
        image2 = context.createImageData(100, 100);
        genImage(image2);
        context.putImageData(image2, 0, 0);

        texture = new THREE.Texture(canvasScaled, new THREE.UVMapping(), THREE.ClampToEdgeWrapping, THREE.ClampToEdgeWrapping);
        texture.needsUpdate = true;

        material = new THREE.MeshLambertMaterial({
            map: texture,
            color: 0xa0a0a0,
            wireframe: false
        });
        geometry = new THREE.BoxGeometry(20, 20, 20, 3, 3, 3);
        mesh = new THREE.Mesh(geometry, material);

        scene.add(mesh);
    }

    function init() {
        var cs = document.getElementById("cs");
        cs.width = 400;
        cs.height = 400;
        camera = new THREE.PerspectiveCamera(75, 400 / 400, 1, 10000);
        camera.position.z = 50;
        camera.position.y = 10;
        scene = new THREE.Scene();

        var light = new THREE.AmbientLight(0x4c4c4c); // 真っ白を1として
        scene.add(light);

        var directionalLight = [];
        directionalLight[0] = new THREE.DirectionalLight(0xd0d0d0, 1);
        directionalLight[0].position.x = 2;
        directionalLight[0].position.y = 2;
        directionalLight[0].position.z = 0;
        directionalLight[0].position.normalize();
        scene.add(directionalLight[0]);

        renderer = new THREE.WebGLRenderer({
            "canvas": cs
        });
        //renderer = new THREE.CanvasRenderer({"canvas":cs});
        renderer.setSize(cs.width, cs.height);

    }


    function animate() {
        // note: three.js includes requestAnimationFrame shim
        requestAnimationFrame(animate);

        camera.position.y = 20;
        camera.position.x = 30 * Math.cos(t);
        camera.position.z = 30 * Math.sin(t);
        //camera.target.x=0;
        //camera.target.y=0;
        //camera.target.z=0;
        camera.lookAt(scene.position);
        updateTexture();
        texture.needsUpdate = true;
        t = t + 0.01;
        renderer.render(scene, camera);
    }
})();
</script>

  </body>
</html>
